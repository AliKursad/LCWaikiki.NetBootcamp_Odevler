// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductAPI.Data.Concrete.EntityFramework.Contexts;

namespace ProductAPI.Data.Migrations
{
    [DbContext(typeof(ProductAPIContext))]
    [Migration("20220419191121_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProductAPI.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 983, DateTimeKind.Local).AddTicks(6646),
                            Description = "Kışlık kaliteli kazaklar",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 983, DateTimeKind.Local).AddTicks(6659),
                            Name = "Kazak"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 983, DateTimeKind.Local).AddTicks(6681),
                            Description = "Tişört çeşitleri",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 983, DateTimeKind.Local).AddTicks(6682),
                            Name = "Tişört"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 983, DateTimeKind.Local).AddTicks(6687),
                            Description = "Ayakkabı çeşitleri",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 983, DateTimeKind.Local).AddTicks(6689),
                            Name = "Ayakkabı"
                        });
                });

            modelBuilder.Entity("ProductAPI.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("UnitsInStock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(6007),
                            Description = "Kalın %100 yün kazak.",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(6797),
                            Name = "Yünlü Kazak",
                            Price = 350m,
                            UnitsInStock = 2500
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9655),
                            Description = "Kalın %100 yün boğazlı kazak.",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9656),
                            Name = "Boğazlı Kazak",
                            Price = 300m,
                            UnitsInStock = 1800
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9664),
                            Description = "Polo yaka yazlık tişört.",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9665),
                            Name = "Polo Yaka Tişört",
                            Price = 150m,
                            UnitsInStock = 3200
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9671),
                            Description = "V Yaka yazlık tişört.",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9673),
                            Name = "V Yaka Tişört",
                            Price = 120m,
                            UnitsInStock = 3900
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9678),
                            Description = "Esnek, rahat tabanlı spor ayakkabı.",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9679),
                            Name = "Spor Ayakkabı",
                            Price = 200m,
                            UnitsInStock = 1500
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9685),
                            Description = "Su geçirmez, soğuğa dayanıklı bağcıklı bot.",
                            ModifiedDate = new DateTime(2022, 4, 19, 22, 11, 20, 979, DateTimeKind.Local).AddTicks(9686),
                            Name = "Bot",
                            Price = 450m,
                            UnitsInStock = 2300
                        });
                });

            modelBuilder.Entity("ProductAPI.Entities.Concrete.Product", b =>
                {
                    b.HasOne("ProductAPI.Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ProductAPI.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
